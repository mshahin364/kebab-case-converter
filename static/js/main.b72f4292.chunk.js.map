{"version":3,"sources":["KebabCaseConverter.js","App.js","serviceWorker.js","index.js"],"names":["KebabCaseConverter","useState","inputText","setInputtext","output","setOutput","outputRef","useRef","type","placeholder","className","value","onChange","e","target","id","onClick","val","kebabCase","replace","toLowerCase","titleCase","toUpperCase","slice","convertToKebabCase","navigator","clipboard","readText","then","text","catch","err","console","error","style","paddingTop","ref","readOnly","current","select","document","execCommand","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"sQAsGeA,MApGf,WAA+B,IAAD,EACMC,mBAAS,IADf,mBACrBC,EADqB,KACVC,EADU,OAEAF,mBAAS,IAFT,mBAErBG,EAFqB,KAEbC,EAFa,KAGtBC,EAAYC,iBAAO,MA0CzB,OACE,kCACE,wDACA,mGAGA,6BACE,2BACEC,KAAK,OACLC,YAAY,aACZC,UAAU,QACVC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAEC,OAAOH,QACrCI,GAAG,WAIP,yBAAKL,UAAU,UACb,4BACEM,QAAS,kBA3DU,SAAAC,GAEzB,GADAZ,EAAU,IACLY,EAAL,CAEA,IASMC,GAFND,GADAA,GADAA,GADAA,EAAMA,EAAIE,QAFsB,4BAEW,KACjCA,QAJsB,+BAIW,KACjCA,QANgB,oCAMW,QAC3BA,QAAQ,UAAW,MAEPC,cAAcD,QAAQ,KAAM,KAC5CE,EAAS,UAAMH,EAAU,GAAGI,eAAnB,OAAmCJ,EAAUK,MAAM,IAClElB,EAAUgB,IA4CWG,CAAmBtB,IAClCQ,UAAU,wBAFZ,WAKU,IANZ,OAQE,4BAAQM,QAzCA,WACZS,UAAUC,UACPC,WACAC,MAAK,SAAAC,GACJ1B,EAAa0B,MAEdC,OAAM,SAAAC,GACLC,QAAQC,MAAM,sCAAuCF,OAkC7BrB,UAAU,wBAAlC,SAEU,IAVZ,OAYE,4BAAQM,QAlCA,WACZb,EAAa,IACbE,EAAU,KAgCkBK,UAAU,wBAAlC,SAEU,IAdZ,QAkBA,yBAAKwB,MAAO,CAAEC,WAAY,QAA1B,kBAEE,2BACE3B,KAAK,OACLO,GAAG,SACHL,UAAU,SACVC,MAAOP,EACPgC,IAAK9B,EACL+B,UAAQ,KAGZ,6BACE,4BAAQrB,QArED,WACMV,EAAUgC,QAClBC,SACTC,SAASC,YAAY,SAkEM/B,UAAU,wBAAjC,W,MC/EOgC,MAXf,WACE,OACE,yBAAKhC,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,UAAhB,oBCGYiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAST,SAASU,eAAe,SD6H3C,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdxB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMsB,c","file":"static/js/main.b72f4292.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nfunction KebabCaseConverter() {\n  const [inputText, setInputtext] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const outputRef = useRef(null);\n\n  const convertToKebabCase = val => {\n    setOutput(\"\");\n    if (!val) return;\n\n    const specialCharsRegex = /[!@.*+?^${}()|[\\]|(: )'\"=\\-\\\\:/]/g;\n    const endingSpecialCharsRegex = /[!@#$%^&*(),.?\"':{}|<>\\s]+$/g;\n    const middleSpecialCharsRegex = /[!@#$%^&*(),.?\"':{}|<>+]/g;\n\n    val = val.replace(middleSpecialCharsRegex, \"\");\n    val = val.replace(endingSpecialCharsRegex, \"\");\n    val = val.replace(specialCharsRegex, \"{#}\");\n    val = val.replace(/({#})+/g, \"-\");\n\n    const kebabCase = val.toLowerCase().replace(/ /g, \"-\");\n    const titleCase = `${kebabCase[0].toUpperCase()}${kebabCase.slice(1)}`;\n    setOutput(titleCase);\n  };\n\n  const copy = () => {\n    const copyText = outputRef.current;\n    copyText.select();\n    document.execCommand(\"copy\");\n  };\n\n  const paste = () => {\n    navigator.clipboard\n      .readText()\n      .then(text => {\n        setInputtext(text);\n      })\n      .catch(err => {\n        console.error(\"Failed to read clipboard contents: \", err);\n      });\n  };\n\n  const clear = () => {\n    setInputtext(\"\");\n    setOutput(\"\");\n  };\n\n  return (\n    <fieldset>\n      <legend>Kebab-Case-Converter</legend>\n      <small>\n        Converts spaces to hyphens (-) and remove all special characters\n      </small>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter text\"\n          className=\"input\"\n          value={inputText}\n          onChange={e => setInputtext(e.target.value)}\n          id=\"input\"\n        />\n      </div>\n\n      <div className=\"d-flex\">\n        <button\n          onClick={() => convertToKebabCase(inputText)}\n          className=\"btn-size btn-primary\"\n        >\n          Convert\n        </button>{\" \"}\n        &nbsp;\n        <button onClick={paste} className=\"btn-size btn-primary\">\n          Paste\n        </button>{\" \"}\n        &nbsp;\n        <button onClick={clear} className=\"btn-size btn-primary\">\n          Clear\n        </button>{\" \"}\n        &nbsp;\n      </div>\n\n      <div style={{ paddingTop: \"2em\" }}>\n        Converted Text: \n        <input\n          type=\"text\"\n          id=\"output\"\n          className=\"output\"\n          value={output}\n          ref={outputRef}\n          readOnly\n        />\n      </div>\n      <div>\n        <button onClick={copy} className=\"btn-size btn-primary\">\n          COPY\n        </button>\n      </div>\n    </fieldset>\n  );\n}\n\nexport default KebabCaseConverter;\n","import React from \"react\";\nimport KebabCaseConverter from \"./KebabCaseConverter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <KebabCaseConverter />\n      <div className=\"author-container\">\n        <span className=\"author\">by mshahin364</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}